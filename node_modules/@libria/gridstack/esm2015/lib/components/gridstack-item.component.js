/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/gridstack-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, Renderer2, ViewEncapsulation, } from '@angular/core';
/** @type {?} */
let _sequence = 0;
export class GridstackItemComponent {
    /**
     * @param {?} elem
     * @param {?} _renderer
     */
    constructor(elem, _renderer) {
        this.elem = elem;
        this._renderer = _renderer;
        this.generatedId = (_sequence++).toString();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._renderer.addClass(this.elem.nativeElement, 'grid-stack-item');
        this._setAttributeIfNotUndefined('data-gs-x', this.x);
        this._setAttributeIfNotUndefined('data-gs-y', this.y);
        this._setAttributeIfNotUndefined('data-gs-width', this.width);
        this._setAttributeIfNotUndefined('data-gs-height', this.height);
        this._setAttributeIfNotUndefined('data-gs-id', this.id);
        this._setAttributeIfNotUndefined('data-gs-max-width', this.maxWidth);
        this._setAttributeIfNotUndefined('data-gs-max-height', this.maxHeight);
        this._setAttributeIfNotUndefined('data-gs-min-width', this.minWidth);
        this._setAttributeIfNotUndefined('data-gs-min-height', this.minHeight);
        this._setAttributeIfTrue('data-gs-no-resize', this.noResize);
        this._setAttributeIfTrue('data-gs-no-move', this.noMove);
        this._setAttributeIfTrue('data-gs-auto-position', this.autoPosition);
        this._setAttributeIfTrue('data-gs-locked', this.locked);
    }
    /**
     * @private
     * @param {?} attrName
     * @param {?} val
     * @return {?}
     */
    _setAttributeIfNotUndefined(attrName, val) {
        if (!_.isNull(val) && !_.isUndefined(val)) {
            this._renderer.setAttribute(this.elem.nativeElement, attrName, val.toString());
        }
    }
    /**
     * @private
     * @param {?} attrName
     * @param {?} val
     * @return {?}
     */
    _setAttributeIfTrue(attrName, val) {
        if (val === true || val === 'true') {
            this._renderer.setAttribute(this.elem.nativeElement, attrName, 'true');
        }
    }
}
GridstackItemComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'div[lb-gridstack-item]',
                template: "<div class=\"grid-stack-item-content\">\r\n    <ng-content></ng-content>\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
GridstackItemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
GridstackItemComponent.propDecorators = {
    x: [{ type: Input }],
    y: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    id: [{ type: Input }],
    maxWidth: [{ type: Input, args: ['max-width',] }],
    maxHeight: [{ type: Input, args: ['max-height',] }],
    minWidth: [{ type: Input, args: ['min-width',] }],
    minHeight: [{ type: Input, args: ['min-height',] }],
    noResize: [{ type: Input, args: ['no-resize',] }],
    noMove: [{ type: Input, args: ['no-move',] }],
    autoPosition: [{ type: Input, args: ['auto-position',] }],
    locked: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    GridstackItemComponent.prototype.x;
    /** @type {?} */
    GridstackItemComponent.prototype.y;
    /** @type {?} */
    GridstackItemComponent.prototype.width;
    /** @type {?} */
    GridstackItemComponent.prototype.height;
    /** @type {?} */
    GridstackItemComponent.prototype.id;
    /** @type {?} */
    GridstackItemComponent.prototype.maxWidth;
    /** @type {?} */
    GridstackItemComponent.prototype.maxHeight;
    /** @type {?} */
    GridstackItemComponent.prototype.minWidth;
    /** @type {?} */
    GridstackItemComponent.prototype.minHeight;
    /** @type {?} */
    GridstackItemComponent.prototype.noResize;
    /** @type {?} */
    GridstackItemComponent.prototype.noMove;
    /** @type {?} */
    GridstackItemComponent.prototype.autoPosition;
    /** @type {?} */
    GridstackItemComponent.prototype.locked;
    /** @type {?} */
    GridstackItemComponent.prototype.generatedId;
    /** @type {?} */
    GridstackItemComponent.prototype.elem;
    /**
     * @type {?}
     * @private
     */
    GridstackItemComponent.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZHN0YWNrLWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxpYnJpYS9ncmlkc3RhY2svIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9ncmlkc3RhY2staXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBRUgsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxFQUNULGlCQUFpQixHQUNwQixNQUFNLGVBQWUsQ0FBQzs7SUFJbkIsU0FBUyxHQUFHLENBQUM7QUFTakIsTUFBTSxPQUFPLHNCQUFzQjs7Ozs7SUFnQi9CLFlBQW1CLElBQWdCLEVBQ2YsU0FBb0I7UUFEckIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNmLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFIakMsZ0JBQVcsR0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFJbEQsQ0FBQzs7OztJQUVFLGVBQWU7UUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsMkJBQTJCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsMkJBQTJCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsMkJBQTJCLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsMkJBQTJCLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQywyQkFBMkIsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLDJCQUEyQixDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsMkJBQTJCLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFdkUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxDQUFDOzs7Ozs7O0lBRU8sMkJBQTJCLENBQUMsUUFBZ0IsRUFBRSxHQUFvQjtRQUN0RSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ2xGO0lBQ0wsQ0FBQzs7Ozs7OztJQUVPLG1CQUFtQixDQUFDLFFBQWdCLEVBQUUsR0FBcUI7UUFDL0QsSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxNQUFNLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQzFFO0lBQ0wsQ0FBQzs7O1lBdkRKLFNBQVMsU0FBQzs7Z0JBRVAsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsOEZBQThDO2dCQUU5QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDeEM7Ozs7WUFoQkcsVUFBVTtZQUVWLFNBQVM7OztnQkFnQlIsS0FBSztnQkFDTCxLQUFLO29CQUNMLEtBQUs7cUJBQ0wsS0FBSztpQkFDTCxLQUFLO3VCQUNMLEtBQUssU0FBQyxXQUFXO3dCQUNqQixLQUFLLFNBQUMsWUFBWTt1QkFDbEIsS0FBSyxTQUFDLFdBQVc7d0JBQ2pCLEtBQUssU0FBQyxZQUFZO3VCQUNsQixLQUFLLFNBQUMsV0FBVztxQkFDakIsS0FBSyxTQUFDLFNBQVM7MkJBQ2YsS0FBSyxTQUFDLGVBQWU7cUJBQ3JCLEtBQUs7Ozs7SUFaTixtQ0FBbUM7O0lBQ25DLG1DQUFtQzs7SUFDbkMsdUNBQXVDOztJQUN2Qyx3Q0FBd0M7O0lBQ3hDLG9DQUEyQjs7SUFDM0IsMENBQXFEOztJQUNyRCwyQ0FBdUQ7O0lBQ3ZELDBDQUFxRDs7SUFDckQsMkNBQXVEOztJQUN2RCwwQ0FBc0Q7O0lBQ3RELHdDQUFrRDs7SUFDbEQsOENBQThEOztJQUM5RCx3Q0FBeUM7O0lBQ3pDLDZDQUFzRDs7SUFFMUMsc0NBQXVCOzs7OztJQUN2QiwyQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQWZ0ZXJWaWV3SW5pdCxcclxuICAgIENvbXBvbmVudCxcclxuICAgIEVsZW1lbnRSZWYsXHJcbiAgICBJbnB1dCxcclxuICAgIFJlbmRlcmVyMixcclxuICAgIFZpZXdFbmNhcHN1bGF0aW9uLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBHcmlkSXRlbSB9IGZyb20gJy4vbW9kZWxzL2dyaWQtaXRlbSc7XHJcblxyXG5kZWNsYXJlIHZhciBfOiBhbnk7XHJcbmxldCBfc2VxdWVuY2UgPSAwO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXHJcbiAgICBzZWxlY3RvcjogJ2RpdltsYi1ncmlkc3RhY2staXRlbV0nLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2dyaWRzdGFjay1pdGVtLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2dyaWRzdGFjay1pdGVtLmNvbXBvbmVudC5zY3NzJ10sXHJcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHcmlkc3RhY2tJdGVtQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgR3JpZEl0ZW0ge1xyXG4gICAgQElucHV0KCkgcHVibGljIHg6IG51bWJlciB8IHN0cmluZztcclxuICAgIEBJbnB1dCgpIHB1YmxpYyB5OiBudW1iZXIgfCBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSBwdWJsaWMgd2lkdGg6IG51bWJlciB8IHN0cmluZztcclxuICAgIEBJbnB1dCgpIHB1YmxpYyBoZWlnaHQ6IG51bWJlciB8IHN0cmluZztcclxuICAgIEBJbnB1dCgpIHB1YmxpYyBpZDogc3RyaW5nO1xyXG4gICAgQElucHV0KCdtYXgtd2lkdGgnKSBwdWJsaWMgbWF4V2lkdGg6IG51bWJlciB8IHN0cmluZztcclxuICAgIEBJbnB1dCgnbWF4LWhlaWdodCcpIHB1YmxpYyBtYXhIZWlnaHQ6IG51bWJlciB8IHN0cmluZztcclxuICAgIEBJbnB1dCgnbWluLXdpZHRoJykgcHVibGljIG1pbldpZHRoOiBudW1iZXIgfCBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ21pbi1oZWlnaHQnKSBwdWJsaWMgbWluSGVpZ2h0OiBudW1iZXIgfCBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ25vLXJlc2l6ZScpIHB1YmxpYyBub1Jlc2l6ZTogYm9vbGVhbiB8IHN0cmluZztcclxuICAgIEBJbnB1dCgnbm8tbW92ZScpIHB1YmxpYyBub01vdmU6IGJvb2xlYW4gfCBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ2F1dG8tcG9zaXRpb24nKSBwdWJsaWMgYXV0b1Bvc2l0aW9uOiBib29sZWFuIHwgc3RyaW5nO1xyXG4gICAgQElucHV0KCkgcHVibGljIGxvY2tlZDogYm9vbGVhbiB8IHN0cmluZztcclxuICAgIHB1YmxpYyBnZW5lcmF0ZWRJZDogc3RyaW5nID0gKF9zZXF1ZW5jZSsrKS50b1N0cmluZygpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtOiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMlxyXG4gICAgKSB7IH1cclxuXHJcbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbS5uYXRpdmVFbGVtZW50LCAnZ3JpZC1zdGFjay1pdGVtJyk7XHJcbiAgICAgICAgdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RVbmRlZmluZWQoJ2RhdGEtZ3MteCcsIHRoaXMueCk7XHJcbiAgICAgICAgdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RVbmRlZmluZWQoJ2RhdGEtZ3MteScsIHRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RVbmRlZmluZWQoJ2RhdGEtZ3Mtd2lkdGgnLCB0aGlzLndpZHRoKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdFVuZGVmaW5lZCgnZGF0YS1ncy1oZWlnaHQnLCB0aGlzLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RVbmRlZmluZWQoJ2RhdGEtZ3MtaWQnLCB0aGlzLmlkKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdFVuZGVmaW5lZCgnZGF0YS1ncy1tYXgtd2lkdGgnLCB0aGlzLm1heFdpZHRoKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdFVuZGVmaW5lZCgnZGF0YS1ncy1tYXgtaGVpZ2h0JywgdGhpcy5tYXhIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuX3NldEF0dHJpYnV0ZUlmTm90VW5kZWZpbmVkKCdkYXRhLWdzLW1pbi13aWR0aCcsIHRoaXMubWluV2lkdGgpO1xyXG4gICAgICAgIHRoaXMuX3NldEF0dHJpYnV0ZUlmTm90VW5kZWZpbmVkKCdkYXRhLWdzLW1pbi1oZWlnaHQnLCB0aGlzLm1pbkhlaWdodCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NldEF0dHJpYnV0ZUlmVHJ1ZSgnZGF0YS1ncy1uby1yZXNpemUnLCB0aGlzLm5vUmVzaXplKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZlRydWUoJ2RhdGEtZ3Mtbm8tbW92ZScsIHRoaXMubm9Nb3ZlKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZlRydWUoJ2RhdGEtZ3MtYXV0by1wb3NpdGlvbicsIHRoaXMuYXV0b1Bvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZlRydWUoJ2RhdGEtZ3MtbG9ja2VkJywgdGhpcy5sb2NrZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NldEF0dHJpYnV0ZUlmTm90VW5kZWZpbmVkKGF0dHJOYW1lOiBzdHJpbmcsIHZhbDogbnVtYmVyIHwgc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFfLmlzTnVsbCh2YWwpICYmICFfLmlzVW5kZWZpbmVkKHZhbCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWxlbS5uYXRpdmVFbGVtZW50LCBhdHRyTmFtZSwgdmFsLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9zZXRBdHRyaWJ1dGVJZlRydWUoYXR0ck5hbWU6IHN0cmluZywgdmFsOiBib29sZWFuIHwgc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09ICd0cnVlJykge1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQsIGF0dHJOYW1lLCAndHJ1ZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=