/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/gridstack.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
export class GridstackService {
    constructor() {
        this._gridItems = [];
        this._grids = [];
    }
    /**
     * @param {?} grid
     * @return {?}
     */
    addGrid(grid) {
        this._grids.push(grid);
    }
    /**
     * @param {?} grid
     * @return {?}
     */
    removeGrid(grid) {
        this._grids.splice(this._grids.findIndex((/**
         * @param {?} g
         * @return {?}
         */
        g => g.generatedId == grid.generatedId)), 1);
        this._gridItems = this._gridItems.filter((/**
         * @param {?} gi
         * @return {?}
         */
        gi => gi.gridId != grid.generatedId));
    }
    /**
     * @param {?} gridId
     * @param {?} gridItemId
     * @return {?}
     */
    attachGridItem(gridId, gridItemId) {
        this._gridItems.find((/**
         * @param {?} gi
         * @return {?}
         */
        gi => gi.item.generatedId == gridItemId)).gridId = gridId;
    }
    /**
     * @param {?} gridItemId
     * @return {?}
     */
    detachGridItemIfExists(gridItemId) {
        /** @type {?} */
        const gridItem = this._gridItems.find((/**
         * @param {?} gi
         * @return {?}
         */
        gi => gi.item.generatedId == gridItemId));
        if (!!gridItem) {
            gridItem.gridId = null;
        }
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getGridItems(gridId) {
        return this._gridItems.filter((/**
         * @param {?} gi
         * @return {?}
         */
        gi => gi.gridId == gridId)).map((/**
         * @param {?} g
         * @return {?}
         */
        g => g.item));
    }
    /**
     * @return {?}
     */
    getOrphanGridItems() {
        return this._gridItems.filter((/**
         * @param {?} gi
         * @return {?}
         */
        gi => gi.gridId == null)).map((/**
         * @param {?} g
         * @return {?}
         */
        g => g.item));
    }
    /**
     * @param {?} gridItem
     * @return {?}
     */
    addOrphanGridItem(gridItem) {
        this._gridItems.push({
            gridId: null,
            item: gridItem
        });
    }
    /**
     * @param {?} gridItemId
     * @return {?}
     */
    removeGridItem(gridItemId) {
        this._gridItems.splice(this._gridItems.findIndex((/**
         * @param {?} gi
         * @return {?}
         */
        gi => gi.item.generatedId == gridItemId)), 1);
    }
}
GridstackService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GridstackService.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    GridstackService.prototype._gridItems;
    /**
     * @type {?}
     * @private
     */
    GridstackService.prototype._grids;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZHN0YWNrLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGlicmlhL2dyaWRzdGFjay8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9ncmlkc3RhY2suc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLM0MsTUFBTSxPQUFPLGdCQUFnQjtJQVF6QjtRQVBRLGVBQVUsR0FHWixFQUFFLENBQUM7UUFFRCxXQUFNLEdBQVcsRUFBRSxDQUFDO0lBRVosQ0FBQzs7Ozs7SUFFVixPQUFPLENBQUMsSUFBVTtRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDOzs7OztJQUVNLFVBQVUsQ0FBQyxJQUFVO1FBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU07Ozs7UUFBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBQyxDQUFDO0lBQ2xGLENBQUM7Ozs7OztJQUVNLGNBQWMsQ0FBQyxNQUFjLEVBQUUsVUFBa0I7UUFDcEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJOzs7O1FBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxVQUFVLEVBQUMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ2xGLENBQUM7Ozs7O0lBRU0sc0JBQXNCLENBQUMsVUFBa0I7O2NBQ3RDLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUk7Ozs7UUFBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLFVBQVUsRUFBQztRQUU5RSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUU7WUFDWixRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUMxQjtJQUNMLENBQUM7Ozs7O0lBRU0sWUFBWSxDQUFDLE1BQWM7UUFDOUIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU07Ozs7UUFBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLElBQUksTUFBTSxFQUFDLENBQUMsR0FBRzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDO0lBQzlFLENBQUM7Ozs7SUFFTSxrQkFBa0I7UUFDckIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU07Ozs7UUFBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFDLENBQUMsR0FBRzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDO0lBQzVFLENBQUM7Ozs7O0lBRU0saUJBQWlCLENBQUMsUUFBa0I7UUFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDakIsTUFBTSxFQUFFLElBQUk7WUFDWixJQUFJLEVBQUUsUUFBUTtTQUNqQixDQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUVNLGNBQWMsQ0FBQyxVQUFrQjtRQUNwQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVM7Ozs7UUFBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLFVBQVUsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7OztZQWpESixVQUFVOzs7Ozs7Ozs7SUFFUCxzQ0FHUzs7Ozs7SUFFVCxrQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEdyaWQgfSBmcm9tICcuLi9jb21wb25lbnRzL21vZGVscy9ncmlkJztcclxuaW1wb3J0IHsgR3JpZEl0ZW0gfSBmcm9tICcuLi9jb21wb25lbnRzL21vZGVscy9ncmlkLWl0ZW0nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgR3JpZHN0YWNrU2VydmljZSB7XHJcbiAgICBwcml2YXRlIF9ncmlkSXRlbXM6IHtcclxuICAgICAgICBncmlkSWQ6IHN0cmluZztcclxuICAgICAgICBpdGVtOiBHcmlkSXRlbTtcclxuICAgIH1bXSA9IFtdO1xyXG5cclxuICAgIHByaXZhdGUgX2dyaWRzOiBHcmlkW10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRHcmlkKGdyaWQ6IEdyaWQpIHtcclxuICAgICAgICB0aGlzLl9ncmlkcy5wdXNoKGdyaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVHcmlkKGdyaWQ6IEdyaWQpIHtcclxuICAgICAgICB0aGlzLl9ncmlkcy5zcGxpY2UodGhpcy5fZ3JpZHMuZmluZEluZGV4KGcgPT4gZy5nZW5lcmF0ZWRJZCA9PSBncmlkLmdlbmVyYXRlZElkKSwgMSk7XHJcbiAgICAgICAgdGhpcy5fZ3JpZEl0ZW1zID0gdGhpcy5fZ3JpZEl0ZW1zLmZpbHRlcihnaSA9PiBnaS5ncmlkSWQgIT0gZ3JpZC5nZW5lcmF0ZWRJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGF0dGFjaEdyaWRJdGVtKGdyaWRJZDogc3RyaW5nLCBncmlkSXRlbUlkOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9ncmlkSXRlbXMuZmluZChnaSA9PiBnaS5pdGVtLmdlbmVyYXRlZElkID09IGdyaWRJdGVtSWQpLmdyaWRJZCA9IGdyaWRJZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGV0YWNoR3JpZEl0ZW1JZkV4aXN0cyhncmlkSXRlbUlkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBncmlkSXRlbSA9IHRoaXMuX2dyaWRJdGVtcy5maW5kKGdpID0+IGdpLml0ZW0uZ2VuZXJhdGVkSWQgPT0gZ3JpZEl0ZW1JZCk7XHJcblxyXG4gICAgICAgIGlmICghIWdyaWRJdGVtKSB7XHJcbiAgICAgICAgICAgIGdyaWRJdGVtLmdyaWRJZCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRHcmlkSXRlbXMoZ3JpZElkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ3JpZEl0ZW1zLmZpbHRlcihnaSA9PiBnaS5ncmlkSWQgPT0gZ3JpZElkKS5tYXAoZyA9PiBnLml0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRPcnBoYW5HcmlkSXRlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyaWRJdGVtcy5maWx0ZXIoZ2kgPT4gZ2kuZ3JpZElkID09IG51bGwpLm1hcChnID0+IGcuaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZE9ycGhhbkdyaWRJdGVtKGdyaWRJdGVtOiBHcmlkSXRlbSkge1xyXG4gICAgICAgIHRoaXMuX2dyaWRJdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgZ3JpZElkOiBudWxsLFxyXG4gICAgICAgICAgICBpdGVtOiBncmlkSXRlbVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVHcmlkSXRlbShncmlkSXRlbUlkOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9ncmlkSXRlbXMuc3BsaWNlKHRoaXMuX2dyaWRJdGVtcy5maW5kSW5kZXgoZ2kgPT4gZ2kuaXRlbS5nZW5lcmF0ZWRJZCA9PSBncmlkSXRlbUlkKSwgMSk7XHJcbiAgICB9XHJcbn1cclxuIl19