{"version":3,"sources":["ng://@libria/gridstack/lib/components/gridstack-item.component.ts","ng://@libria/gridstack/lib/services/gridstack.service.ts","ng://@libria/gridstack/lib/components/gridstack.component.ts","ng://@libria/gridstack/lib/gridstack.module.ts"],"names":["_sequence","GridstackItemComponent","elem","_renderer","this","generatedId","toString","prototype","ngAfterViewInit","addClass","nativeElement","_setAttributeIfNotUndefined","x","y","width","height","id","maxWidth","maxHeight","minWidth","minHeight","_setAttributeIfTrue","noResize","noMove","autoPosition","locked","attrName","val","_","isNull","isUndefined","setAttribute","Component","args","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","Input","GridstackService","_gridItems","_grids","addGrid","grid","push","removeGrid","splice","findIndex","g","filter","gi","gridId","attachGridItem","gridItemId","find","item","detachGridItemIfExists","gridItem","getGridItems","map","getOrphanGridItems","addOrphanGridItem","removeGridItem","Injectable","GridstackComponent","_zone","_el","_gridstackService","change","EventEmitter","added","removed","dragstart","dragstop","resizestart","gsresizestop","_ngUnsubscribe","Subject","ngOnInit","_this","options","acceptWidgets","console","error","runOutsideAngular","_isValueTrue","animate","el","$","gridstack","data","_gridstack","on","evt","items","itemsOfCurrentGrid","nodes","i","attr","split","s","startsWith","replace","some","ei","forEach","emit","ui","existingItemIds","ngOnChanges","changes","heightChanges","optionsChanges","isFirstChange","currentValue","previousValue","_updateGridstackHeight","prev","curr","cellHeight","gridstackItems","pipe","takeUntil","subscribe","_handleItemChanges","toArray","ngOnDestroy","next","destroy","itemsToAdd","w","itemsToRemove","batchUpdate","_addItem","_removeItem","commit","willItFit","makeWidget","removeWidget","NgZone","ContentChildren","Output","GridstackModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    Renderer2,\r\n    ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { GridItem } from './models/grid-item';\r\n\r\ndeclare var _: any;\r\nlet _sequence = 0;\r\n\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'div[lb-gridstack-item]',\r\n    templateUrl: './gridstack-item.component.html',\r\n    styleUrls: ['./gridstack-item.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class GridstackItemComponent implements AfterViewInit, GridItem {\r\n    @Input() public x: number | string;\r\n    @Input() public y: number | string;\r\n    @Input() public width: number | string;\r\n    @Input() public height: number | string;\r\n    @Input() public id: string;\r\n    @Input('max-width') public maxWidth: number | string;\r\n    @Input('max-height') public maxHeight: number | string;\r\n    @Input('min-width') public minWidth: number | string;\r\n    @Input('min-height') public minHeight: number | string;\r\n    @Input('no-resize') public noResize: boolean | string;\r\n    @Input('no-move') public noMove: boolean | string;\r\n    @Input('auto-position') public autoPosition: boolean | string;\r\n    @Input() public locked: boolean | string;\r\n    public generatedId: string = (_sequence++).toString();\r\n\r\n    constructor(public elem: ElementRef,\r\n                private _renderer: Renderer2\r\n    ) { }\r\n\r\n    public ngAfterViewInit() {\r\n        this._renderer.addClass(this.elem.nativeElement, 'grid-stack-item');\r\n        this._setAttributeIfNotUndefined('data-gs-x', this.x);\r\n        this._setAttributeIfNotUndefined('data-gs-y', this.y);\r\n        this._setAttributeIfNotUndefined('data-gs-width', this.width);\r\n        this._setAttributeIfNotUndefined('data-gs-height', this.height);\r\n        this._setAttributeIfNotUndefined('data-gs-id', this.id);\r\n        this._setAttributeIfNotUndefined('data-gs-max-width', this.maxWidth);\r\n        this._setAttributeIfNotUndefined('data-gs-max-height', this.maxHeight);\r\n        this._setAttributeIfNotUndefined('data-gs-min-width', this.minWidth);\r\n        this._setAttributeIfNotUndefined('data-gs-min-height', this.minHeight);\r\n\r\n        this._setAttributeIfTrue('data-gs-no-resize', this.noResize);\r\n        this._setAttributeIfTrue('data-gs-no-move', this.noMove);\r\n        this._setAttributeIfTrue('data-gs-auto-position', this.autoPosition);\r\n        this._setAttributeIfTrue('data-gs-locked', this.locked);\r\n    }\r\n\r\n    private _setAttributeIfNotUndefined(attrName: string, val: number | string): void {\r\n        if (!_.isNull(val) && !_.isUndefined(val)) {\r\n            this._renderer.setAttribute(this.elem.nativeElement, attrName, val.toString());\r\n        }\r\n    }\r\n\r\n    private _setAttributeIfTrue(attrName: string, val: boolean | string): void {\r\n        if (val === true || val === 'true') {\r\n            this._renderer.setAttribute(this.elem.nativeElement, attrName, 'true');\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Grid } from '../components/models/grid';\r\nimport { GridItem } from '../components/models/grid-item';\r\n\r\n@Injectable()\r\nexport class GridstackService {\r\n    private _gridItems: {\r\n        gridId: string;\r\n        item: GridItem;\r\n    }[] = [];\r\n\r\n    private _grids: Grid[] = [];\r\n\r\n    constructor() { }\r\n\r\n    public addGrid(grid: Grid) {\r\n        this._grids.push(grid);\r\n    }\r\n\r\n    public removeGrid(grid: Grid) {\r\n        this._grids.splice(this._grids.findIndex(g => g.generatedId == grid.generatedId), 1);\r\n        this._gridItems = this._gridItems.filter(gi => gi.gridId != grid.generatedId);\r\n    }\r\n\r\n    public attachGridItem(gridId: string, gridItemId: string) {\r\n        this._gridItems.find(gi => gi.item.generatedId == gridItemId).gridId = gridId;\r\n    }\r\n\r\n    public detachGridItemIfExists(gridItemId: string) {\r\n        const gridItem = this._gridItems.find(gi => gi.item.generatedId == gridItemId);\r\n\r\n        if (!!gridItem) {\r\n            gridItem.gridId = null;\r\n        }\r\n    }\r\n\r\n    public getGridItems(gridId: string) {\r\n        return this._gridItems.filter(gi => gi.gridId == gridId).map(g => g.item);\r\n    }\r\n\r\n    public getOrphanGridItems() {\r\n        return this._gridItems.filter(gi => gi.gridId == null).map(g => g.item);\r\n    }\r\n\r\n    public addOrphanGridItem(gridItem: GridItem) {\r\n        this._gridItems.push({\r\n            gridId: null,\r\n            item: gridItem\r\n        });\r\n    }\r\n\r\n    public removeGridItem(gridItemId: string) {\r\n        this._gridItems.splice(this._gridItems.findIndex(gi => gi.item.generatedId == gridItemId), 1);\r\n    }\r\n}\r\n","import { GridstackOptions } from './models/gridstack-options';\r\nimport {\r\n    AfterViewInit,\r\n    Component,\r\n    ContentChildren,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    NgZone,\r\n    Output,\r\n    QueryList,\r\n    Renderer2,\r\n    ViewEncapsulation,\r\n    OnInit,\r\n    OnDestroy,\r\n    OnChanges,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\n\r\ndeclare var _: any;\r\nlet _sequence = 0;\r\n\r\nimport { GridstackItemComponent } from './gridstack-item.component';\r\nimport { Item } from './models/item';\r\nimport { GridstackService } from '../services/gridstack.service';\r\nimport { Grid } from './models/grid';\r\nimport { GridItem } from './models/grid-item';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'div[lb-gridstack]',\r\n    templateUrl: './gridstack.component.html',\r\n    styleUrls: ['./gridstack.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class GridstackComponent implements OnInit, OnDestroy, AfterViewInit, OnChanges, Grid {\r\n    @ContentChildren(GridstackItemComponent) public gridstackItems: QueryList<GridstackItemComponent>;\r\n    @Input() public options: GridstackOptions;\r\n    @Input() public animate: boolean | string;\r\n    @Input() public width: number | string;\r\n    @Input() public height: number | string;\r\n\r\n    @Output() public change = new EventEmitter<Item[]>();\r\n    @Output() public added = new EventEmitter<Item[]>();\r\n    @Output() public removed = new EventEmitter<Item[]>();\r\n    @Output() public dragstart = new EventEmitter();\r\n    @Output() public dragstop = new EventEmitter();\r\n    @Output() public resizestart = new EventEmitter();\r\n    @Output() public gsresizestop = new EventEmitter();\r\n\r\n    public generatedId = (_sequence++).toString();\r\n\r\n    private _gridstack: any;\r\n\r\n    private _ngUnsubscribe = new Subject();\r\n\r\n    constructor(private _zone: NgZone,\r\n                private _el: ElementRef,\r\n                private _renderer: Renderer2,\r\n                private _gridstackService: GridstackService) { }\r\n\r\n    public ngOnInit(): void {\r\n        if (this.options && this.options.acceptWidgets != null) {\r\n            console.error('acceptWidgets option not supported yet!');\r\n        }\r\n\r\n        this._zone.runOutsideAngular(() => {\r\n            this._renderer.addClass(this._el.nativeElement, 'grid-stack');\r\n\r\n            if (this._isValueTrue(this.animate)) {\r\n                this._renderer.setAttribute(this._el.nativeElement, 'data-gs-animate', 'true');\r\n            }\r\n\r\n            this._setAttributeIfNotUndefined('data-gs-width', this.width);\r\n            this._setAttributeIfNotUndefined('data-gs-height', this.height);\r\n\r\n            const width = this.width || (this.options || {}).width;\r\n\r\n            if (!_.isNull(width) && !_.isUndefined(width)) {\r\n                this._renderer.addClass(this._el.nativeElement, `grid-stack-${width}`);\r\n            }\r\n\r\n            const el = ($(this._el.nativeElement) as any).gridstack(this.options);\r\n            $(el).data('generated-id', this.generatedId);\r\n            this._gridstack = $(el).data('gridstack');\r\n\r\n            this._gridstackService.addGrid(this);\r\n\r\n            // Hook events\r\n            $(this._el.nativeElement).on('added', (evt: any, items: Item[]) => {\r\n                const itemsOfCurrentGrid = this._gridstackService.getGridItems(this.generatedId);\r\n                const existingItemIds: string[] = (this._gridstack as any).grid.nodes.map(i => $(i.el)\r\n                    .attr('class')\r\n                    .split(/\\s+/)\r\n                    .find(s => s.startsWith('lb-generated-id-'))\r\n                    .replace('lb-generated-id-', ''));\r\n\r\n                const itemsToAdd = existingItemIds.filter(i => !itemsOfCurrentGrid.some(ei => ei.generatedId === i));\r\n                itemsToAdd.forEach(i => this._gridstackService.attachGridItem(this.generatedId, i));\r\n\r\n                this.added.emit(items);\r\n            });\r\n\r\n            $(this._el.nativeElement).on('change', (evt: any, items: Item[]) => {\r\n                this.change.emit(items);\r\n            });\r\n\r\n            $(this._el.nativeElement).on('dragstart', (evt: any, ui: any) => {\r\n              this.dragstart.emit(evt);\r\n            });\r\n\r\n            $(this._el.nativeElement).on('dragstop', (evt: any, ui: any) => {\r\n              this.dragstop.emit(evt);\r\n            });\r\n\r\n            $(this._el.nativeElement).on('resizestart', (evt: any, ui: any) => {\r\n              this.resizestart.emit(evt);\r\n            });\r\n\r\n            $(this._el.nativeElement).on('gsresizestop', (evt: any, ui: any) => {\r\n              this.gsresizestop.emit(evt);\r\n            });\r\n\r\n            $(this._el.nativeElement).on('removed', (evt: any, items: Item[]) => {\r\n                const itemsOfCurrentGrid = this._gridstackService.getGridItems(this.generatedId);\r\n                const existingItemIds: string[] = (this._gridstack as any).grid.nodes.map(i => $(i.el)\r\n                    .attr('class')\r\n                    .split(/\\s+/)\r\n                    .find(s => s.startsWith('lb-generated-id-'))\r\n                    .replace('lb-generated-id-', ''));\r\n\r\n                const itemsToDelete = itemsOfCurrentGrid.filter(i => !existingItemIds.some(ei => ei === i.generatedId));\r\n                itemsToDelete.forEach(i => this._gridstackService.detachGridItemIfExists(i.generatedId));\r\n                this.removed.emit(items);\r\n            });\r\n        });\r\n    }\r\n\r\n    public ngOnChanges(changes: SimpleChanges): void {\r\n        const heightChanges = changes.height;\r\n        const optionsChanges = changes.options;\r\n\r\n        if (heightChanges && !heightChanges.isFirstChange() && heightChanges.currentValue !== heightChanges.previousValue) {\r\n            this._updateGridstackHeight(+heightChanges.currentValue);\r\n        }\r\n\r\n        if (optionsChanges && !optionsChanges.isFirstChange()) {\r\n            const prev: GridstackOptions = optionsChanges.previousValue;\r\n            const curr: GridstackOptions = optionsChanges.currentValue;\r\n\r\n            if (curr.cellHeight !== prev.cellHeight) {\r\n                this._updateGridstackHeight(curr.cellHeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        this.gridstackItems.changes\r\n            .pipe(takeUntil(this._ngUnsubscribe))\r\n            .subscribe(changes => {\r\n                this._handleItemChanges(this.gridstackItems.toArray());\r\n            });\r\n\r\n        this._handleItemChanges(this.gridstackItems.toArray());\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this._ngUnsubscribe.next();\r\n        this._gridstack.destroy();\r\n        this._gridstackService.removeGrid(this);\r\n    }\r\n\r\n    private _updateGridstackHeight(height: number | string) {\r\n        this._zone.runOutsideAngular(() => {\r\n            this._gridstack.cellHeight(height as any);\r\n        });\r\n    }\r\n\r\n    private _handleItemChanges(items: GridstackItemComponent[]): void {\r\n        const itemsOfCurrentGrid = this._gridstackService.getGridItems(this.generatedId);\r\n        const itemsToAdd = items.filter(i => !itemsOfCurrentGrid.some(w => w.generatedId === i.generatedId));\r\n        const itemsToRemove = itemsOfCurrentGrid.filter(w => !items.some(i => i.generatedId === w.generatedId));\r\n\r\n        this._gridstack.batchUpdate();\r\n        itemsToAdd.forEach(i => this._addItem(i));\r\n        itemsToRemove.forEach(i => this._removeItem(i));\r\n        this._gridstack.commit();\r\n    }\r\n\r\n    private _addItem(item: GridstackItemComponent): void {\r\n        this._zone.runOutsideAngular(() => {\r\n            if (this._gridstack.willItFit(+item.x, +item.y, +item.width, +item.height, this._isValueTrue(item.autoPosition))) {\r\n                this._gridstackService.addOrphanGridItem(item);\r\n                $(item.elem.nativeElement).addClass('lb-generated-id-' + item.generatedId);\r\n                this._gridstack.makeWidget(item.elem.nativeElement);\r\n            } else {\r\n                console.error('Not enough free space to place the widget');\r\n            }\r\n        });\r\n    }\r\n\r\n    private _removeItem(item: GridItem): void {\r\n        this._gridstackService.removeGridItem(item.generatedId);\r\n\r\n        this._zone.runOutsideAngular(() => {\r\n            this._gridstack.removeWidget(item.elem.nativeElement);\r\n        });\r\n    }\r\n\r\n    private _setAttributeIfNotUndefined(attrName: string, val: number | string): void {\r\n        if (!_.isNull(val) && !_.isUndefined(val)) {\r\n            this._renderer.setAttribute(this._el.nativeElement, attrName, val.toString());\r\n        }\r\n    }\r\n\r\n    private _isValueTrue(val: boolean | string) {\r\n        return (val === true || val === 'true');\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GridstackComponent } from './components/gridstack.component';\r\nimport { GridstackItemComponent } from './components/gridstack-item.component';\r\nimport { GridstackService } from './services/gridstack.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n        GridstackComponent,\r\n        GridstackItemComponent],\r\n    exports: [\r\n        GridstackComponent,\r\n        GridstackItemComponent]\r\n})\r\nexport class GridstackModule {\r\n    public static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: GridstackModule,\r\n            providers: [\r\n                GridstackService\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}