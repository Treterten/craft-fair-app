/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/gridstack.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var GridstackService = /** @class */ (function () {
    function GridstackService() {
        this._gridItems = [];
        this._grids = [];
    }
    /**
     * @param {?} grid
     * @return {?}
     */
    GridstackService.prototype.addGrid = /**
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        this._grids.push(grid);
    };
    /**
     * @param {?} grid
     * @return {?}
     */
    GridstackService.prototype.removeGrid = /**
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        this._grids.splice(this._grids.findIndex((/**
         * @param {?} g
         * @return {?}
         */
        function (g) { return g.generatedId == grid.generatedId; })), 1);
        this._gridItems = this._gridItems.filter((/**
         * @param {?} gi
         * @return {?}
         */
        function (gi) { return gi.gridId != grid.generatedId; }));
    };
    /**
     * @param {?} gridId
     * @param {?} gridItemId
     * @return {?}
     */
    GridstackService.prototype.attachGridItem = /**
     * @param {?} gridId
     * @param {?} gridItemId
     * @return {?}
     */
    function (gridId, gridItemId) {
        this._gridItems.find((/**
         * @param {?} gi
         * @return {?}
         */
        function (gi) { return gi.item.generatedId == gridItemId; })).gridId = gridId;
    };
    /**
     * @param {?} gridItemId
     * @return {?}
     */
    GridstackService.prototype.detachGridItemIfExists = /**
     * @param {?} gridItemId
     * @return {?}
     */
    function (gridItemId) {
        /** @type {?} */
        var gridItem = this._gridItems.find((/**
         * @param {?} gi
         * @return {?}
         */
        function (gi) { return gi.item.generatedId == gridItemId; }));
        if (!!gridItem) {
            gridItem.gridId = null;
        }
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    GridstackService.prototype.getGridItems = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        return this._gridItems.filter((/**
         * @param {?} gi
         * @return {?}
         */
        function (gi) { return gi.gridId == gridId; })).map((/**
         * @param {?} g
         * @return {?}
         */
        function (g) { return g.item; }));
    };
    /**
     * @return {?}
     */
    GridstackService.prototype.getOrphanGridItems = /**
     * @return {?}
     */
    function () {
        return this._gridItems.filter((/**
         * @param {?} gi
         * @return {?}
         */
        function (gi) { return gi.gridId == null; })).map((/**
         * @param {?} g
         * @return {?}
         */
        function (g) { return g.item; }));
    };
    /**
     * @param {?} gridItem
     * @return {?}
     */
    GridstackService.prototype.addOrphanGridItem = /**
     * @param {?} gridItem
     * @return {?}
     */
    function (gridItem) {
        this._gridItems.push({
            gridId: null,
            item: gridItem
        });
    };
    /**
     * @param {?} gridItemId
     * @return {?}
     */
    GridstackService.prototype.removeGridItem = /**
     * @param {?} gridItemId
     * @return {?}
     */
    function (gridItemId) {
        this._gridItems.splice(this._gridItems.findIndex((/**
         * @param {?} gi
         * @return {?}
         */
        function (gi) { return gi.item.generatedId == gridItemId; })), 1);
    };
    GridstackService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GridstackService.ctorParameters = function () { return []; };
    return GridstackService;
}());
export { GridstackService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    GridstackService.prototype._gridItems;
    /**
     * @type {?}
     * @private
     */
    GridstackService.prototype._grids;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZHN0YWNrLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGlicmlhL2dyaWRzdGFjay8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9ncmlkc3RhY2suc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0M7SUFTSTtRQVBRLGVBQVUsR0FHWixFQUFFLENBQUM7UUFFRCxXQUFNLEdBQVcsRUFBRSxDQUFDO0lBRVosQ0FBQzs7Ozs7SUFFVixrQ0FBTzs7OztJQUFkLFVBQWUsSUFBVTtRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDOzs7OztJQUVNLHFDQUFVOzs7O0lBQWpCLFVBQWtCLElBQVU7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQWpDLENBQWlDLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsRUFBRSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsV0FBVyxFQUE3QixDQUE2QixFQUFDLENBQUM7SUFDbEYsQ0FBQzs7Ozs7O0lBRU0seUNBQWM7Ozs7O0lBQXJCLFVBQXNCLE1BQWMsRUFBRSxVQUFrQjtRQUNwRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLFVBQVUsRUFBakMsQ0FBaUMsRUFBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDbEYsQ0FBQzs7Ozs7SUFFTSxpREFBc0I7Ozs7SUFBN0IsVUFBOEIsVUFBa0I7O1lBQ3RDLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLFVBQVUsRUFBakMsQ0FBaUMsRUFBQztRQUU5RSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUU7WUFDWixRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUMxQjtJQUNMLENBQUM7Ozs7O0lBRU0sdUNBQVk7Ozs7SUFBbkIsVUFBb0IsTUFBYztRQUM5QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsRUFBRSxDQUFDLE1BQU0sSUFBSSxNQUFNLEVBQW5CLENBQW1CLEVBQUMsQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxFQUFOLENBQU0sRUFBQyxDQUFDO0lBQzlFLENBQUM7Ozs7SUFFTSw2Q0FBa0I7OztJQUF6QjtRQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNOzs7O1FBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxFQUFFLENBQUMsTUFBTSxJQUFJLElBQUksRUFBakIsQ0FBaUIsRUFBQyxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQU4sQ0FBTSxFQUFDLENBQUM7SUFDNUUsQ0FBQzs7Ozs7SUFFTSw0Q0FBaUI7Ozs7SUFBeEIsVUFBeUIsUUFBa0I7UUFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDakIsTUFBTSxFQUFFLElBQUk7WUFDWixJQUFJLEVBQUUsUUFBUTtTQUNqQixDQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUVNLHlDQUFjOzs7O0lBQXJCLFVBQXNCLFVBQWtCO1FBQ3BDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksVUFBVSxFQUFqQyxDQUFpQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEcsQ0FBQzs7Z0JBakRKLFVBQVU7Ozs7SUFrRFgsdUJBQUM7Q0FBQSxBQWxERCxJQWtEQztTQWpEWSxnQkFBZ0I7Ozs7OztJQUN6QixzQ0FHUzs7Ozs7SUFFVCxrQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEdyaWQgfSBmcm9tICcuLi9jb21wb25lbnRzL21vZGVscy9ncmlkJztcclxuaW1wb3J0IHsgR3JpZEl0ZW0gfSBmcm9tICcuLi9jb21wb25lbnRzL21vZGVscy9ncmlkLWl0ZW0nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgR3JpZHN0YWNrU2VydmljZSB7XHJcbiAgICBwcml2YXRlIF9ncmlkSXRlbXM6IHtcclxuICAgICAgICBncmlkSWQ6IHN0cmluZztcclxuICAgICAgICBpdGVtOiBHcmlkSXRlbTtcclxuICAgIH1bXSA9IFtdO1xyXG5cclxuICAgIHByaXZhdGUgX2dyaWRzOiBHcmlkW10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRHcmlkKGdyaWQ6IEdyaWQpIHtcclxuICAgICAgICB0aGlzLl9ncmlkcy5wdXNoKGdyaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVHcmlkKGdyaWQ6IEdyaWQpIHtcclxuICAgICAgICB0aGlzLl9ncmlkcy5zcGxpY2UodGhpcy5fZ3JpZHMuZmluZEluZGV4KGcgPT4gZy5nZW5lcmF0ZWRJZCA9PSBncmlkLmdlbmVyYXRlZElkKSwgMSk7XHJcbiAgICAgICAgdGhpcy5fZ3JpZEl0ZW1zID0gdGhpcy5fZ3JpZEl0ZW1zLmZpbHRlcihnaSA9PiBnaS5ncmlkSWQgIT0gZ3JpZC5nZW5lcmF0ZWRJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGF0dGFjaEdyaWRJdGVtKGdyaWRJZDogc3RyaW5nLCBncmlkSXRlbUlkOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9ncmlkSXRlbXMuZmluZChnaSA9PiBnaS5pdGVtLmdlbmVyYXRlZElkID09IGdyaWRJdGVtSWQpLmdyaWRJZCA9IGdyaWRJZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGV0YWNoR3JpZEl0ZW1JZkV4aXN0cyhncmlkSXRlbUlkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBncmlkSXRlbSA9IHRoaXMuX2dyaWRJdGVtcy5maW5kKGdpID0+IGdpLml0ZW0uZ2VuZXJhdGVkSWQgPT0gZ3JpZEl0ZW1JZCk7XHJcblxyXG4gICAgICAgIGlmICghIWdyaWRJdGVtKSB7XHJcbiAgICAgICAgICAgIGdyaWRJdGVtLmdyaWRJZCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRHcmlkSXRlbXMoZ3JpZElkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ3JpZEl0ZW1zLmZpbHRlcihnaSA9PiBnaS5ncmlkSWQgPT0gZ3JpZElkKS5tYXAoZyA9PiBnLml0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRPcnBoYW5HcmlkSXRlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyaWRJdGVtcy5maWx0ZXIoZ2kgPT4gZ2kuZ3JpZElkID09IG51bGwpLm1hcChnID0+IGcuaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZE9ycGhhbkdyaWRJdGVtKGdyaWRJdGVtOiBHcmlkSXRlbSkge1xyXG4gICAgICAgIHRoaXMuX2dyaWRJdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgZ3JpZElkOiBudWxsLFxyXG4gICAgICAgICAgICBpdGVtOiBncmlkSXRlbVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVHcmlkSXRlbShncmlkSXRlbUlkOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9ncmlkSXRlbXMuc3BsaWNlKHRoaXMuX2dyaWRJdGVtcy5maW5kSW5kZXgoZ2kgPT4gZ2kuaXRlbS5nZW5lcmF0ZWRJZCA9PSBncmlkSXRlbUlkKSwgMSk7XHJcbiAgICB9XHJcbn1cclxuIl19