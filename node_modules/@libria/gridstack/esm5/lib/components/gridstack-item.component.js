/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/gridstack-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, Renderer2, ViewEncapsulation, } from '@angular/core';
/** @type {?} */
var _sequence = 0;
var GridstackItemComponent = /** @class */ (function () {
    function GridstackItemComponent(elem, _renderer) {
        this.elem = elem;
        this._renderer = _renderer;
        this.generatedId = (_sequence++).toString();
    }
    /**
     * @return {?}
     */
    GridstackItemComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._renderer.addClass(this.elem.nativeElement, 'grid-stack-item');
        this._setAttributeIfNotUndefined('data-gs-x', this.x);
        this._setAttributeIfNotUndefined('data-gs-y', this.y);
        this._setAttributeIfNotUndefined('data-gs-width', this.width);
        this._setAttributeIfNotUndefined('data-gs-height', this.height);
        this._setAttributeIfNotUndefined('data-gs-id', this.id);
        this._setAttributeIfNotUndefined('data-gs-max-width', this.maxWidth);
        this._setAttributeIfNotUndefined('data-gs-max-height', this.maxHeight);
        this._setAttributeIfNotUndefined('data-gs-min-width', this.minWidth);
        this._setAttributeIfNotUndefined('data-gs-min-height', this.minHeight);
        this._setAttributeIfTrue('data-gs-no-resize', this.noResize);
        this._setAttributeIfTrue('data-gs-no-move', this.noMove);
        this._setAttributeIfTrue('data-gs-auto-position', this.autoPosition);
        this._setAttributeIfTrue('data-gs-locked', this.locked);
    };
    /**
     * @private
     * @param {?} attrName
     * @param {?} val
     * @return {?}
     */
    GridstackItemComponent.prototype._setAttributeIfNotUndefined = /**
     * @private
     * @param {?} attrName
     * @param {?} val
     * @return {?}
     */
    function (attrName, val) {
        if (!_.isNull(val) && !_.isUndefined(val)) {
            this._renderer.setAttribute(this.elem.nativeElement, attrName, val.toString());
        }
    };
    /**
     * @private
     * @param {?} attrName
     * @param {?} val
     * @return {?}
     */
    GridstackItemComponent.prototype._setAttributeIfTrue = /**
     * @private
     * @param {?} attrName
     * @param {?} val
     * @return {?}
     */
    function (attrName, val) {
        if (val === true || val === 'true') {
            this._renderer.setAttribute(this.elem.nativeElement, attrName, 'true');
        }
    };
    GridstackItemComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'div[lb-gridstack-item]',
                    template: "<div class=\"grid-stack-item-content\">\r\n    <ng-content></ng-content>\r\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    GridstackItemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    GridstackItemComponent.propDecorators = {
        x: [{ type: Input }],
        y: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        id: [{ type: Input }],
        maxWidth: [{ type: Input, args: ['max-width',] }],
        maxHeight: [{ type: Input, args: ['max-height',] }],
        minWidth: [{ type: Input, args: ['min-width',] }],
        minHeight: [{ type: Input, args: ['min-height',] }],
        noResize: [{ type: Input, args: ['no-resize',] }],
        noMove: [{ type: Input, args: ['no-move',] }],
        autoPosition: [{ type: Input, args: ['auto-position',] }],
        locked: [{ type: Input }]
    };
    return GridstackItemComponent;
}());
export { GridstackItemComponent };
if (false) {
    /** @type {?} */
    GridstackItemComponent.prototype.x;
    /** @type {?} */
    GridstackItemComponent.prototype.y;
    /** @type {?} */
    GridstackItemComponent.prototype.width;
    /** @type {?} */
    GridstackItemComponent.prototype.height;
    /** @type {?} */
    GridstackItemComponent.prototype.id;
    /** @type {?} */
    GridstackItemComponent.prototype.maxWidth;
    /** @type {?} */
    GridstackItemComponent.prototype.maxHeight;
    /** @type {?} */
    GridstackItemComponent.prototype.minWidth;
    /** @type {?} */
    GridstackItemComponent.prototype.minHeight;
    /** @type {?} */
    GridstackItemComponent.prototype.noResize;
    /** @type {?} */
    GridstackItemComponent.prototype.noMove;
    /** @type {?} */
    GridstackItemComponent.prototype.autoPosition;
    /** @type {?} */
    GridstackItemComponent.prototype.locked;
    /** @type {?} */
    GridstackItemComponent.prototype.generatedId;
    /** @type {?} */
    GridstackItemComponent.prototype.elem;
    /**
     * @type {?}
     * @private
     */
    GridstackItemComponent.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZHN0YWNrLWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxpYnJpYS9ncmlkc3RhY2svIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9ncmlkc3RhY2staXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBRUgsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxFQUNULGlCQUFpQixHQUNwQixNQUFNLGVBQWUsQ0FBQzs7SUFJbkIsU0FBUyxHQUFHLENBQUM7QUFFakI7SUF1QkksZ0NBQW1CLElBQWdCLEVBQ2YsU0FBb0I7UUFEckIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNmLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFIakMsZ0JBQVcsR0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFJbEQsQ0FBQzs7OztJQUVFLGdEQUFlOzs7SUFBdEI7UUFDSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQywyQkFBMkIsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQywyQkFBMkIsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLDJCQUEyQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLDJCQUEyQixDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsMkJBQTJCLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLDJCQUEyQixDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV2RSxJQUFJLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVELENBQUM7Ozs7Ozs7SUFFTyw0REFBMkI7Ozs7OztJQUFuQyxVQUFvQyxRQUFnQixFQUFFLEdBQW9CO1FBQ3RFLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN2QyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDbEY7SUFDTCxDQUFDOzs7Ozs7O0lBRU8sb0RBQW1COzs7Ozs7SUFBM0IsVUFBNEIsUUFBZ0IsRUFBRSxHQUFxQjtRQUMvRCxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLE1BQU0sRUFBRTtZQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDMUU7SUFDTCxDQUFDOztnQkF2REosU0FBUyxTQUFDOztvQkFFUCxRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyw4RkFBOEM7b0JBRTlDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozs7Z0JBaEJHLFVBQVU7Z0JBRVYsU0FBUzs7O29CQWdCUixLQUFLO29CQUNMLEtBQUs7d0JBQ0wsS0FBSzt5QkFDTCxLQUFLO3FCQUNMLEtBQUs7MkJBQ0wsS0FBSyxTQUFDLFdBQVc7NEJBQ2pCLEtBQUssU0FBQyxZQUFZOzJCQUNsQixLQUFLLFNBQUMsV0FBVzs0QkFDakIsS0FBSyxTQUFDLFlBQVk7MkJBQ2xCLEtBQUssU0FBQyxXQUFXO3lCQUNqQixLQUFLLFNBQUMsU0FBUzsrQkFDZixLQUFLLFNBQUMsZUFBZTt5QkFDckIsS0FBSzs7SUFvQ1YsNkJBQUM7Q0FBQSxBQXhERCxJQXdEQztTQWpEWSxzQkFBc0I7OztJQUMvQixtQ0FBbUM7O0lBQ25DLG1DQUFtQzs7SUFDbkMsdUNBQXVDOztJQUN2Qyx3Q0FBd0M7O0lBQ3hDLG9DQUEyQjs7SUFDM0IsMENBQXFEOztJQUNyRCwyQ0FBdUQ7O0lBQ3ZELDBDQUFxRDs7SUFDckQsMkNBQXVEOztJQUN2RCwwQ0FBc0Q7O0lBQ3RELHdDQUFrRDs7SUFDbEQsOENBQThEOztJQUM5RCx3Q0FBeUM7O0lBQ3pDLDZDQUFzRDs7SUFFMUMsc0NBQXVCOzs7OztJQUN2QiwyQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQWZ0ZXJWaWV3SW5pdCxcclxuICAgIENvbXBvbmVudCxcclxuICAgIEVsZW1lbnRSZWYsXHJcbiAgICBJbnB1dCxcclxuICAgIFJlbmRlcmVyMixcclxuICAgIFZpZXdFbmNhcHN1bGF0aW9uLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBHcmlkSXRlbSB9IGZyb20gJy4vbW9kZWxzL2dyaWQtaXRlbSc7XHJcblxyXG5kZWNsYXJlIHZhciBfOiBhbnk7XHJcbmxldCBfc2VxdWVuY2UgPSAwO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXHJcbiAgICBzZWxlY3RvcjogJ2RpdltsYi1ncmlkc3RhY2staXRlbV0nLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2dyaWRzdGFjay1pdGVtLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2dyaWRzdGFjay1pdGVtLmNvbXBvbmVudC5zY3NzJ10sXHJcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHcmlkc3RhY2tJdGVtQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgR3JpZEl0ZW0ge1xyXG4gICAgQElucHV0KCkgcHVibGljIHg6IG51bWJlciB8IHN0cmluZztcclxuICAgIEBJbnB1dCgpIHB1YmxpYyB5OiBudW1iZXIgfCBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSBwdWJsaWMgd2lkdGg6IG51bWJlciB8IHN0cmluZztcclxuICAgIEBJbnB1dCgpIHB1YmxpYyBoZWlnaHQ6IG51bWJlciB8IHN0cmluZztcclxuICAgIEBJbnB1dCgpIHB1YmxpYyBpZDogc3RyaW5nO1xyXG4gICAgQElucHV0KCdtYXgtd2lkdGgnKSBwdWJsaWMgbWF4V2lkdGg6IG51bWJlciB8IHN0cmluZztcclxuICAgIEBJbnB1dCgnbWF4LWhlaWdodCcpIHB1YmxpYyBtYXhIZWlnaHQ6IG51bWJlciB8IHN0cmluZztcclxuICAgIEBJbnB1dCgnbWluLXdpZHRoJykgcHVibGljIG1pbldpZHRoOiBudW1iZXIgfCBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ21pbi1oZWlnaHQnKSBwdWJsaWMgbWluSGVpZ2h0OiBudW1iZXIgfCBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ25vLXJlc2l6ZScpIHB1YmxpYyBub1Jlc2l6ZTogYm9vbGVhbiB8IHN0cmluZztcclxuICAgIEBJbnB1dCgnbm8tbW92ZScpIHB1YmxpYyBub01vdmU6IGJvb2xlYW4gfCBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ2F1dG8tcG9zaXRpb24nKSBwdWJsaWMgYXV0b1Bvc2l0aW9uOiBib29sZWFuIHwgc3RyaW5nO1xyXG4gICAgQElucHV0KCkgcHVibGljIGxvY2tlZDogYm9vbGVhbiB8IHN0cmluZztcclxuICAgIHB1YmxpYyBnZW5lcmF0ZWRJZDogc3RyaW5nID0gKF9zZXF1ZW5jZSsrKS50b1N0cmluZygpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtOiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMlxyXG4gICAgKSB7IH1cclxuXHJcbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbS5uYXRpdmVFbGVtZW50LCAnZ3JpZC1zdGFjay1pdGVtJyk7XHJcbiAgICAgICAgdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RVbmRlZmluZWQoJ2RhdGEtZ3MteCcsIHRoaXMueCk7XHJcbiAgICAgICAgdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RVbmRlZmluZWQoJ2RhdGEtZ3MteScsIHRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RVbmRlZmluZWQoJ2RhdGEtZ3Mtd2lkdGgnLCB0aGlzLndpZHRoKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdFVuZGVmaW5lZCgnZGF0YS1ncy1oZWlnaHQnLCB0aGlzLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RVbmRlZmluZWQoJ2RhdGEtZ3MtaWQnLCB0aGlzLmlkKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdFVuZGVmaW5lZCgnZGF0YS1ncy1tYXgtd2lkdGgnLCB0aGlzLm1heFdpZHRoKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdFVuZGVmaW5lZCgnZGF0YS1ncy1tYXgtaGVpZ2h0JywgdGhpcy5tYXhIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuX3NldEF0dHJpYnV0ZUlmTm90VW5kZWZpbmVkKCdkYXRhLWdzLW1pbi13aWR0aCcsIHRoaXMubWluV2lkdGgpO1xyXG4gICAgICAgIHRoaXMuX3NldEF0dHJpYnV0ZUlmTm90VW5kZWZpbmVkKCdkYXRhLWdzLW1pbi1oZWlnaHQnLCB0aGlzLm1pbkhlaWdodCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NldEF0dHJpYnV0ZUlmVHJ1ZSgnZGF0YS1ncy1uby1yZXNpemUnLCB0aGlzLm5vUmVzaXplKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZlRydWUoJ2RhdGEtZ3Mtbm8tbW92ZScsIHRoaXMubm9Nb3ZlKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZlRydWUoJ2RhdGEtZ3MtYXV0by1wb3NpdGlvbicsIHRoaXMuYXV0b1Bvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZlRydWUoJ2RhdGEtZ3MtbG9ja2VkJywgdGhpcy5sb2NrZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NldEF0dHJpYnV0ZUlmTm90VW5kZWZpbmVkKGF0dHJOYW1lOiBzdHJpbmcsIHZhbDogbnVtYmVyIHwgc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFfLmlzTnVsbCh2YWwpICYmICFfLmlzVW5kZWZpbmVkKHZhbCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWxlbS5uYXRpdmVFbGVtZW50LCBhdHRyTmFtZSwgdmFsLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9zZXRBdHRyaWJ1dGVJZlRydWUoYXR0ck5hbWU6IHN0cmluZywgdmFsOiBib29sZWFuIHwgc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09ICd0cnVlJykge1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQsIGF0dHJOYW1lLCAndHJ1ZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=